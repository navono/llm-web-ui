# --- 阶段 1: 构建环境 ---
FROM nvidia/cuda:12.8.1-cudnn-devel-ubuntu22.04 AS builder

ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG NO_PROXY
ENV HTTP_PROXY=$HTTP_PROXY
ENV HTTPS_PROXY=$HTTPS_PROXY
ENV NO_PROXY=$NO_PROXY

# 配置 apt 代理
RUN if [ -n "$HTTP_PROXY" ]; then \
    echo "Acquire::http::Proxy \"${HTTP_PROXY}\";" > /etc/apt/apt.conf.d/proxy.conf && \
    echo "Acquire::https::Proxy \"${HTTPS_PROXY}\";" >> /etc/apt/apt.conf.d/proxy.conf; \
    fi

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    ffmpeg \
    libsndfile1 \
    python3.10 \
    python3.10-dev \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# 设置 Python 3.10 为默认 python
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1

# 安装 uv
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:$PATH"

# 设置工作目录
WORKDIR /app

# 克隆 index-tts 仓库
RUN git clone https://github.com/index-tts/index-tts.git /app/index-tts

WORKDIR /app/index-tts

# 使用 uv 创建虚拟环境并安装依赖
RUN uv venv .venv && \
    . .venv/bin/activate && \
    uv pip install -e .

# 安装 openai-audio-server 所需的额外依赖
RUN . .venv/bin/activate && \
    uv pip install fastapi uvicorn loguru pydantic python-multipart


# --- 阶段 2: 运行环境 ---
FROM nvidia/cuda:12.8.1-cudnn-runtime-ubuntu22.04

ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG NO_PROXY
ENV HTTP_PROXY=$HTTP_PROXY
ENV HTTPS_PROXY=$HTTPS_PROXY
ENV NO_PROXY=$NO_PROXY

# 配置 apt 代理
RUN if [ -n "$HTTP_PROXY" ]; then \
    echo "Acquire::http::Proxy \"${HTTP_PROXY}\";" > /etc/apt/apt.conf.d/proxy.conf && \
    echo "Acquire::https::Proxy \"${HTTPS_PROXY}\";" >> /etc/apt/apt.conf.d/proxy.conf; \
    fi

# 安装运行时依赖
RUN apt-get update && apt-get install -y \
    ffmpeg \
    libsndfile1 \
    python3.10 \
    && rm -rf /var/lib/apt/lists/*

# 设置 Python 3.10 为默认 python
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1

# 设置工作目录
WORKDIR /app

# 从 builder 阶段复制 index-tts 和虚拟环境
COPY --from=builder /app/index-tts /app/index-tts

# 复制 openai-audio-server.py
COPY docker/indextts2/openai-audio-server.py /app/openai-audio-server.py

# 设置环境变量
ENV PYTHONUNBUFFERED=1
ENV PATH="/app/index-tts/.venv/bin:$PATH"
ENV PYTHONPATH="/app/index-tts"

# 暴露端口
EXPOSE 12234

# 启动命令
CMD ["python", "/app/openai-audio-server.py", \
    "--model_dir", "/app/models_cache/snapshots/258515cc44cee99d5b9694a67ee194ffd8a3e618", \
    "--port", "12234", \
    "--host", "0.0.0.0", \
    "--audio_prompt_dir", "/app/audio_prompts"]
